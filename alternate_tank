package entity.mob;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;

import entity.Entity;
import main.Handler;
import main.Id;
import tile.Tile;

public class Tank2 extends Entity {
	public boolean alive;
	public Tank2(int x, int y, int width, int height, int velX, int velY, boolean solid, Id id, Handler handler, boolean alive) {
		super( x,  y,  width,  height,  velX,  velY,  solid, id,  handler);
		this.alive = alive;
	}

	public Rectangle getBounds() {
		return new Rectangle(x, y, width, height);
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public int getHeight() {
		return height;
	}

	public void setHeight(int height) {
		this.height = height;
	}

	public int getxMotion() {
		return velX;
	}

	public void setxMotion(int xMotion) {
		this.velX = xMotion;
	}

	public int getyMotion() {
		return velY;
	}

	public void setyMotion(int yMotion) {
		this.velY = yMotion;
	}

	public boolean isAlive() {
		return alive;
	}

	public void setAlive(boolean alive) {
		this.alive = alive;
	}

	public Id getId() {
		return id;
	}

	public void setId(Id id) {
		this.id = id;
	}

	public Handler getHandler() {
		return handler;
	}

	public void setHandler(Handler handler) {
		this.handler = handler;
	}

	@Override
	public void render(Graphics g) {
		g.setColor(Color.WHITE);
		g.fillRect(x, y, width, height);
		
	}

	@Override
	public void tick() {
		x += velX;
		y += velY;
		
		for (Tile ti : handler.tile) {
			if (!ti.solid)
				break;
			if (ti.getId() == Id.wall) {
				if (getBoundsTop().intersects(ti.getBounds())) {
					setVelY(0);
				}
				if (getBoundsBottom().intersects(ti.getBounds())) {
					setVelY(0);
				}
				if (getBoundsLeft().intersects(ti.getBounds())) {
					setVelY(0);
					//x = ti.getX() + ti.getWidth();
				}
				if (getBoundsRight().intersects(ti.getBounds())) {
					setVelY(0);
					//x = ti.getX() - ti.getWidth();
				}
			}
		}
		if (velX != 0) {
			frameDelay++;
			if (frameDelay >= 10) {
				frame++;
				frameDelay = 0;
			}
		}
		
	}

	public Rectangle getBoundsTop() {
		return new Rectangle(x,y,width,height);
	}
	public Rectangle getBoundsBottom() {
		return new Rectangle(x,y,width,height);
	}
	public Rectangle getBoundsLeft() {
		return new Rectangle(x,y,width,height);
	}
	public Rectangle getBoundsRight() {
		return new Rectangle(x,y,width,height);
	}
}
